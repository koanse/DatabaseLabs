//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DB___labs {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private OBJECTSDataTable tableOBJECTS;
        
        private HISTVALUESDataTable tableHISTVALUES;
        
        private OBJTYPESDataTable tableOBJTYPES;
        
        private PARAMETERSDataTable tablePARAMETERS;
        
        private PARAMTYPESDataTable tablePARAMTYPES;
        
        private SCALARSDataTable tableSCALARS;
        
        private UNITSDataTable tableUNITS;
        
        private System.Data.DataRelation relationFK_OBJECTS_OBJTYPES__OBJTYPES;
        
        private System.Data.DataRelation relationFK_HISTVALU_PARAMETER_PARAMETE;
        
        private System.Data.DataRelation _relationFK_PARAMETE_OBJECTS___OBJECTS;
        
        private System.Data.DataRelation relationFK_PARAMETE_PARAMETER_SCALARS;
        
        private System.Data.DataRelation relationFK_PARAMETE_PARAMTYPE_PARAMTYP;
        
        private System.Data.DataRelation _relationFK_PARAMTYP_UNITS___P_UNITS;
        
        private System.Data.DataRelation relationFK_SCALARS_PARAMETER_PARAMETE;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["OBJECTS"] != null)) {
                    base.Tables.Add(new OBJECTSDataTable(ds.Tables["OBJECTS"]));
                }
                if ((ds.Tables["HISTVALUES"] != null)) {
                    base.Tables.Add(new HISTVALUESDataTable(ds.Tables["HISTVALUES"]));
                }
                if ((ds.Tables["OBJTYPES"] != null)) {
                    base.Tables.Add(new OBJTYPESDataTable(ds.Tables["OBJTYPES"]));
                }
                if ((ds.Tables["PARAMETERS"] != null)) {
                    base.Tables.Add(new PARAMETERSDataTable(ds.Tables["PARAMETERS"]));
                }
                if ((ds.Tables["PARAMTYPES"] != null)) {
                    base.Tables.Add(new PARAMTYPESDataTable(ds.Tables["PARAMTYPES"]));
                }
                if ((ds.Tables["SCALARS"] != null)) {
                    base.Tables.Add(new SCALARSDataTable(ds.Tables["SCALARS"]));
                }
                if ((ds.Tables["UNITS"] != null)) {
                    base.Tables.Add(new UNITSDataTable(ds.Tables["UNITS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OBJECTSDataTable OBJECTS {
            get {
                return this.tableOBJECTS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HISTVALUESDataTable HISTVALUES {
            get {
                return this.tableHISTVALUES;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OBJTYPESDataTable OBJTYPES {
            get {
                return this.tableOBJTYPES;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PARAMETERSDataTable PARAMETERS {
            get {
                return this.tablePARAMETERS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PARAMTYPESDataTable PARAMTYPES {
            get {
                return this.tablePARAMTYPES;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SCALARSDataTable SCALARS {
            get {
                return this.tableSCALARS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UNITSDataTable UNITS {
            get {
                return this.tableUNITS;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["OBJECTS"] != null)) {
                    base.Tables.Add(new OBJECTSDataTable(ds.Tables["OBJECTS"]));
                }
                if ((ds.Tables["HISTVALUES"] != null)) {
                    base.Tables.Add(new HISTVALUESDataTable(ds.Tables["HISTVALUES"]));
                }
                if ((ds.Tables["OBJTYPES"] != null)) {
                    base.Tables.Add(new OBJTYPESDataTable(ds.Tables["OBJTYPES"]));
                }
                if ((ds.Tables["PARAMETERS"] != null)) {
                    base.Tables.Add(new PARAMETERSDataTable(ds.Tables["PARAMETERS"]));
                }
                if ((ds.Tables["PARAMTYPES"] != null)) {
                    base.Tables.Add(new PARAMTYPESDataTable(ds.Tables["PARAMTYPES"]));
                }
                if ((ds.Tables["SCALARS"] != null)) {
                    base.Tables.Add(new SCALARSDataTable(ds.Tables["SCALARS"]));
                }
                if ((ds.Tables["UNITS"] != null)) {
                    base.Tables.Add(new UNITSDataTable(ds.Tables["UNITS"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableOBJECTS = ((OBJECTSDataTable)(base.Tables["OBJECTS"]));
            if ((initTable == true)) {
                if ((this.tableOBJECTS != null)) {
                    this.tableOBJECTS.InitVars();
                }
            }
            this.tableHISTVALUES = ((HISTVALUESDataTable)(base.Tables["HISTVALUES"]));
            if ((initTable == true)) {
                if ((this.tableHISTVALUES != null)) {
                    this.tableHISTVALUES.InitVars();
                }
            }
            this.tableOBJTYPES = ((OBJTYPESDataTable)(base.Tables["OBJTYPES"]));
            if ((initTable == true)) {
                if ((this.tableOBJTYPES != null)) {
                    this.tableOBJTYPES.InitVars();
                }
            }
            this.tablePARAMETERS = ((PARAMETERSDataTable)(base.Tables["PARAMETERS"]));
            if ((initTable == true)) {
                if ((this.tablePARAMETERS != null)) {
                    this.tablePARAMETERS.InitVars();
                }
            }
            this.tablePARAMTYPES = ((PARAMTYPESDataTable)(base.Tables["PARAMTYPES"]));
            if ((initTable == true)) {
                if ((this.tablePARAMTYPES != null)) {
                    this.tablePARAMTYPES.InitVars();
                }
            }
            this.tableSCALARS = ((SCALARSDataTable)(base.Tables["SCALARS"]));
            if ((initTable == true)) {
                if ((this.tableSCALARS != null)) {
                    this.tableSCALARS.InitVars();
                }
            }
            this.tableUNITS = ((UNITSDataTable)(base.Tables["UNITS"]));
            if ((initTable == true)) {
                if ((this.tableUNITS != null)) {
                    this.tableUNITS.InitVars();
                }
            }
            this.relationFK_OBJECTS_OBJTYPES__OBJTYPES = this.Relations["FK_OBJECTS_OBJTYPES__OBJTYPES"];
            this.relationFK_HISTVALU_PARAMETER_PARAMETE = this.Relations["FK_HISTVALU_PARAMETER_PARAMETE"];
            this._relationFK_PARAMETE_OBJECTS___OBJECTS = this.Relations["FK_PARAMETE_OBJECTS -_OBJECTS"];
            this.relationFK_PARAMETE_PARAMETER_SCALARS = this.Relations["FK_PARAMETE_PARAMETER_SCALARS"];
            this.relationFK_PARAMETE_PARAMTYPE_PARAMTYP = this.Relations["FK_PARAMETE_PARAMTYPE_PARAMTYP"];
            this._relationFK_PARAMTYP_UNITS___P_UNITS = this.Relations["FK_PARAMTYP_UNITS - P_UNITS"];
            this.relationFK_SCALARS_PARAMETER_PARAMETE = this.Relations["FK_SCALARS_PARAMETER_PARAMETE"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableOBJECTS = new OBJECTSDataTable();
            base.Tables.Add(this.tableOBJECTS);
            this.tableHISTVALUES = new HISTVALUESDataTable();
            base.Tables.Add(this.tableHISTVALUES);
            this.tableOBJTYPES = new OBJTYPESDataTable();
            base.Tables.Add(this.tableOBJTYPES);
            this.tablePARAMETERS = new PARAMETERSDataTable();
            base.Tables.Add(this.tablePARAMETERS);
            this.tablePARAMTYPES = new PARAMTYPESDataTable();
            base.Tables.Add(this.tablePARAMTYPES);
            this.tableSCALARS = new SCALARSDataTable();
            base.Tables.Add(this.tableSCALARS);
            this.tableUNITS = new UNITSDataTable();
            base.Tables.Add(this.tableUNITS);
            this.relationFK_OBJECTS_OBJTYPES__OBJTYPES = new System.Data.DataRelation("FK_OBJECTS_OBJTYPES__OBJTYPES", new System.Data.DataColumn[] {
                        this.tableOBJTYPES.OBJTYPEIDColumn}, new System.Data.DataColumn[] {
                        this.tableOBJECTS.OBJTYPEIDColumn}, false);
            this.Relations.Add(this.relationFK_OBJECTS_OBJTYPES__OBJTYPES);
            this.relationFK_HISTVALU_PARAMETER_PARAMETE = new System.Data.DataRelation("FK_HISTVALU_PARAMETER_PARAMETE", new System.Data.DataColumn[] {
                        this.tablePARAMETERS.PARAMIDColumn}, new System.Data.DataColumn[] {
                        this.tableHISTVALUES.PARAMIDColumn}, false);
            this.Relations.Add(this.relationFK_HISTVALU_PARAMETER_PARAMETE);
            this._relationFK_PARAMETE_OBJECTS___OBJECTS = new System.Data.DataRelation("FK_PARAMETE_OBJECTS -_OBJECTS", new System.Data.DataColumn[] {
                        this.tableOBJECTS.OBJIDColumn}, new System.Data.DataColumn[] {
                        this.tablePARAMETERS.OBJIDColumn}, false);
            this.Relations.Add(this._relationFK_PARAMETE_OBJECTS___OBJECTS);
            this.relationFK_PARAMETE_PARAMETER_SCALARS = new System.Data.DataRelation("FK_PARAMETE_PARAMETER_SCALARS", new System.Data.DataColumn[] {
                        this.tableSCALARS.PARAMIDColumn}, new System.Data.DataColumn[] {
                        this.tablePARAMETERS.SCA_PARAMIDColumn}, false);
            this.Relations.Add(this.relationFK_PARAMETE_PARAMETER_SCALARS);
            this.relationFK_PARAMETE_PARAMTYPE_PARAMTYP = new System.Data.DataRelation("FK_PARAMETE_PARAMTYPE_PARAMTYP", new System.Data.DataColumn[] {
                        this.tablePARAMTYPES.PARAMTYPEIDColumn}, new System.Data.DataColumn[] {
                        this.tablePARAMETERS.PARAMTYPEIDColumn}, false);
            this.Relations.Add(this.relationFK_PARAMETE_PARAMTYPE_PARAMTYP);
            this._relationFK_PARAMTYP_UNITS___P_UNITS = new System.Data.DataRelation("FK_PARAMTYP_UNITS - P_UNITS", new System.Data.DataColumn[] {
                        this.tableUNITS.UNITIDColumn}, new System.Data.DataColumn[] {
                        this.tablePARAMTYPES.UNITIDColumn}, false);
            this.Relations.Add(this._relationFK_PARAMTYP_UNITS___P_UNITS);
            this.relationFK_SCALARS_PARAMETER_PARAMETE = new System.Data.DataRelation("FK_SCALARS_PARAMETER_PARAMETE", new System.Data.DataColumn[] {
                        this.tablePARAMETERS.PARAMIDColumn}, new System.Data.DataColumn[] {
                        this.tableSCALARS.PARAMIDColumn}, false);
            this.Relations.Add(this.relationFK_SCALARS_PARAMETER_PARAMETE);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOBJECTS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHISTVALUES() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOBJTYPES() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePARAMETERS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePARAMTYPES() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSCALARS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUNITS() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void OBJECTSRowChangeEventHandler(object sender, OBJECTSRowChangeEvent e);
        
        public delegate void HISTVALUESRowChangeEventHandler(object sender, HISTVALUESRowChangeEvent e);
        
        public delegate void OBJTYPESRowChangeEventHandler(object sender, OBJTYPESRowChangeEvent e);
        
        public delegate void PARAMETERSRowChangeEventHandler(object sender, PARAMETERSRowChangeEvent e);
        
        public delegate void PARAMTYPESRowChangeEventHandler(object sender, PARAMTYPESRowChangeEvent e);
        
        public delegate void SCALARSRowChangeEventHandler(object sender, SCALARSRowChangeEvent e);
        
        public delegate void UNITSRowChangeEventHandler(object sender, UNITSRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OBJECTSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOBJID;
            
            private System.Data.DataColumn columnOBJTYPEID;
            
            private System.Data.DataColumn columnDATE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSDataTable() {
                this.TableName = "OBJECTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBJECTSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OBJECTSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBJIDColumn {
                get {
                    return this.columnOBJID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBJTYPEIDColumn {
                get {
                    return this.columnOBJTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRow this[int index] {
                get {
                    return ((OBJECTSRow)(this.Rows[index]));
                }
            }
            
            public event OBJECTSRowChangeEventHandler OBJECTSRowChanging;
            
            public event OBJECTSRowChangeEventHandler OBJECTSRowChanged;
            
            public event OBJECTSRowChangeEventHandler OBJECTSRowDeleting;
            
            public event OBJECTSRowChangeEventHandler OBJECTSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOBJECTSRow(OBJECTSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRow AddOBJECTSRow(decimal OBJID, OBJTYPESRow parentOBJTYPESRowByFK_OBJECTS_OBJTYPES__OBJTYPES, System.DateTime DATE) {
                OBJECTSRow rowOBJECTSRow = ((OBJECTSRow)(this.NewRow()));
                rowOBJECTSRow.ItemArray = new object[] {
                        OBJID,
                        parentOBJTYPESRowByFK_OBJECTS_OBJTYPES__OBJTYPES[0],
                        DATE};
                this.Rows.Add(rowOBJECTSRow);
                return rowOBJECTSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRow FindByOBJID(decimal OBJID) {
                return ((OBJECTSRow)(this.Rows.Find(new object[] {
                            OBJID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OBJECTSDataTable cln = ((OBJECTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OBJECTSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOBJID = base.Columns["OBJID"];
                this.columnOBJTYPEID = base.Columns["OBJTYPEID"];
                this.columnDATE = base.Columns["DATE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOBJID = new System.Data.DataColumn("OBJID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJID);
                this.columnOBJTYPEID = new System.Data.DataColumn("OBJTYPEID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJTYPEID);
                this.columnDATE = new System.Data.DataColumn("DATE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOBJID}, true));
                this.columnOBJID.AllowDBNull = false;
                this.columnOBJID.Unique = true;
                this.columnOBJTYPEID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRow NewOBJECTSRow() {
                return ((OBJECTSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OBJECTSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OBJECTSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OBJECTSRowChanged != null)) {
                    this.OBJECTSRowChanged(this, new OBJECTSRowChangeEvent(((OBJECTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OBJECTSRowChanging != null)) {
                    this.OBJECTSRowChanging(this, new OBJECTSRowChangeEvent(((OBJECTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OBJECTSRowDeleted != null)) {
                    this.OBJECTSRowDeleted(this, new OBJECTSRowChangeEvent(((OBJECTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OBJECTSRowDeleting != null)) {
                    this.OBJECTSRowDeleting(this, new OBJECTSRowChangeEvent(((OBJECTSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOBJECTSRow(OBJECTSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OBJECTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HISTVALUESDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPARAMID;
            
            private System.Data.DataColumn columnLEFTBOUND;
            
            private System.Data.DataColumn columnRIGHTBOUND;
            
            private System.Data.DataColumn columnVALUE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESDataTable() {
                this.TableName = "HISTVALUES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HISTVALUESDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HISTVALUESDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PARAMIDColumn {
                get {
                    return this.columnPARAMID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LEFTBOUNDColumn {
                get {
                    return this.columnLEFTBOUND;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RIGHTBOUNDColumn {
                get {
                    return this.columnRIGHTBOUND;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESRow this[int index] {
                get {
                    return ((HISTVALUESRow)(this.Rows[index]));
                }
            }
            
            public event HISTVALUESRowChangeEventHandler HISTVALUESRowChanging;
            
            public event HISTVALUESRowChangeEventHandler HISTVALUESRowChanged;
            
            public event HISTVALUESRowChangeEventHandler HISTVALUESRowDeleting;
            
            public event HISTVALUESRowChangeEventHandler HISTVALUESRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHISTVALUESRow(HISTVALUESRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESRow AddHISTVALUESRow(PARAMETERSRow parentPARAMETERSRowByFK_HISTVALU_PARAMETER_PARAMETE, decimal LEFTBOUND, decimal RIGHTBOUND, decimal VALUE) {
                HISTVALUESRow rowHISTVALUESRow = ((HISTVALUESRow)(this.NewRow()));
                rowHISTVALUESRow.ItemArray = new object[] {
                        parentPARAMETERSRowByFK_HISTVALU_PARAMETER_PARAMETE[0],
                        LEFTBOUND,
                        RIGHTBOUND,
                        VALUE};
                this.Rows.Add(rowHISTVALUESRow);
                return rowHISTVALUESRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESRow FindByPARAMIDLEFTBOUND(decimal PARAMID, decimal LEFTBOUND) {
                return ((HISTVALUESRow)(this.Rows.Find(new object[] {
                            PARAMID,
                            LEFTBOUND})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                HISTVALUESDataTable cln = ((HISTVALUESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new HISTVALUESDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPARAMID = base.Columns["PARAMID"];
                this.columnLEFTBOUND = base.Columns["LEFTBOUND"];
                this.columnRIGHTBOUND = base.Columns["RIGHTBOUND"];
                this.columnVALUE = base.Columns["VALUE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPARAMID = new System.Data.DataColumn("PARAMID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMID);
                this.columnLEFTBOUND = new System.Data.DataColumn("LEFTBOUND", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLEFTBOUND);
                this.columnRIGHTBOUND = new System.Data.DataColumn("RIGHTBOUND", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRIGHTBOUND);
                this.columnVALUE = new System.Data.DataColumn("VALUE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPARAMID,
                                this.columnLEFTBOUND}, true));
                this.columnPARAMID.AllowDBNull = false;
                this.columnLEFTBOUND.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESRow NewHISTVALUESRow() {
                return ((HISTVALUESRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new HISTVALUESRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(HISTVALUESRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HISTVALUESRowChanged != null)) {
                    this.HISTVALUESRowChanged(this, new HISTVALUESRowChangeEvent(((HISTVALUESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HISTVALUESRowChanging != null)) {
                    this.HISTVALUESRowChanging(this, new HISTVALUESRowChangeEvent(((HISTVALUESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HISTVALUESRowDeleted != null)) {
                    this.HISTVALUESRowDeleted(this, new HISTVALUESRowChangeEvent(((HISTVALUESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HISTVALUESRowDeleting != null)) {
                    this.HISTVALUESRowDeleting(this, new HISTVALUESRowChangeEvent(((HISTVALUESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHISTVALUESRow(HISTVALUESRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HISTVALUESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OBJTYPESDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOBJTYPEID;
            
            private System.Data.DataColumn columnOBJTYPENAME;
            
            private System.Data.DataColumn columnOBJTYPEDESC;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESDataTable() {
                this.TableName = "OBJTYPES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBJTYPESDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OBJTYPESDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBJTYPEIDColumn {
                get {
                    return this.columnOBJTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBJTYPENAMEColumn {
                get {
                    return this.columnOBJTYPENAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBJTYPEDESCColumn {
                get {
                    return this.columnOBJTYPEDESC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESRow this[int index] {
                get {
                    return ((OBJTYPESRow)(this.Rows[index]));
                }
            }
            
            public event OBJTYPESRowChangeEventHandler OBJTYPESRowChanging;
            
            public event OBJTYPESRowChangeEventHandler OBJTYPESRowChanged;
            
            public event OBJTYPESRowChangeEventHandler OBJTYPESRowDeleting;
            
            public event OBJTYPESRowChangeEventHandler OBJTYPESRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOBJTYPESRow(OBJTYPESRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESRow AddOBJTYPESRow(decimal OBJTYPEID, string OBJTYPENAME, string OBJTYPEDESC) {
                OBJTYPESRow rowOBJTYPESRow = ((OBJTYPESRow)(this.NewRow()));
                rowOBJTYPESRow.ItemArray = new object[] {
                        OBJTYPEID,
                        OBJTYPENAME,
                        OBJTYPEDESC};
                this.Rows.Add(rowOBJTYPESRow);
                return rowOBJTYPESRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESRow FindByOBJTYPEID(decimal OBJTYPEID) {
                return ((OBJTYPESRow)(this.Rows.Find(new object[] {
                            OBJTYPEID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                OBJTYPESDataTable cln = ((OBJTYPESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new OBJTYPESDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOBJTYPEID = base.Columns["OBJTYPEID"];
                this.columnOBJTYPENAME = base.Columns["OBJTYPENAME"];
                this.columnOBJTYPEDESC = base.Columns["OBJTYPEDESC"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOBJTYPEID = new System.Data.DataColumn("OBJTYPEID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJTYPEID);
                this.columnOBJTYPENAME = new System.Data.DataColumn("OBJTYPENAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJTYPENAME);
                this.columnOBJTYPEDESC = new System.Data.DataColumn("OBJTYPEDESC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJTYPEDESC);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOBJTYPEID}, true));
                this.columnOBJTYPEID.AllowDBNull = false;
                this.columnOBJTYPEID.Unique = true;
                this.columnOBJTYPENAME.MaxLength = 100;
                this.columnOBJTYPEDESC.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESRow NewOBJTYPESRow() {
                return ((OBJTYPESRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OBJTYPESRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(OBJTYPESRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OBJTYPESRowChanged != null)) {
                    this.OBJTYPESRowChanged(this, new OBJTYPESRowChangeEvent(((OBJTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OBJTYPESRowChanging != null)) {
                    this.OBJTYPESRowChanging(this, new OBJTYPESRowChangeEvent(((OBJTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OBJTYPESRowDeleted != null)) {
                    this.OBJTYPESRowDeleted(this, new OBJTYPESRowChangeEvent(((OBJTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OBJTYPESRowDeleting != null)) {
                    this.OBJTYPESRowDeleting(this, new OBJTYPESRowChangeEvent(((OBJTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOBJTYPESRow(OBJTYPESRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OBJTYPESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PARAMETERSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPARAMID;
            
            private System.Data.DataColumn columnPARAMTYPEID;
            
            private System.Data.DataColumn columnOBJID;
            
            private System.Data.DataColumn columnSCA_PARAMID;
            
            private System.Data.DataColumn columnERRORS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSDataTable() {
                this.TableName = "PARAMETERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARAMETERSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PARAMETERSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PARAMIDColumn {
                get {
                    return this.columnPARAMID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PARAMTYPEIDColumn {
                get {
                    return this.columnPARAMTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBJIDColumn {
                get {
                    return this.columnOBJID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SCA_PARAMIDColumn {
                get {
                    return this.columnSCA_PARAMID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ERRORSColumn {
                get {
                    return this.columnERRORS;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow this[int index] {
                get {
                    return ((PARAMETERSRow)(this.Rows[index]));
                }
            }
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowChanging;
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowChanged;
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowDeleting;
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPARAMETERSRow(PARAMETERSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow AddPARAMETERSRow(decimal PARAMID, PARAMTYPESRow parentPARAMTYPESRowByFK_PARAMETE_PARAMTYPE_PARAMTYP, OBJECTSRow _parentOBJECTSRowByFK_PARAMETE_OBJECTS___OBJECTS, SCALARSRow parentSCALARSRowByFK_PARAMETE_PARAMETER_SCALARS, decimal ERRORS) {
                PARAMETERSRow rowPARAMETERSRow = ((PARAMETERSRow)(this.NewRow()));
                rowPARAMETERSRow.ItemArray = new object[] {
                        PARAMID,
                        parentPARAMTYPESRowByFK_PARAMETE_PARAMTYPE_PARAMTYP[0],
                        _parentOBJECTSRowByFK_PARAMETE_OBJECTS___OBJECTS[0],
                        parentSCALARSRowByFK_PARAMETE_PARAMETER_SCALARS[0],
                        ERRORS};
                this.Rows.Add(rowPARAMETERSRow);
                return rowPARAMETERSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow FindByPARAMID(decimal PARAMID) {
                return ((PARAMETERSRow)(this.Rows.Find(new object[] {
                            PARAMID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PARAMETERSDataTable cln = ((PARAMETERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PARAMETERSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPARAMID = base.Columns["PARAMID"];
                this.columnPARAMTYPEID = base.Columns["PARAMTYPEID"];
                this.columnOBJID = base.Columns["OBJID"];
                this.columnSCA_PARAMID = base.Columns["SCA_PARAMID"];
                this.columnERRORS = base.Columns["ERRORS"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPARAMID = new System.Data.DataColumn("PARAMID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMID);
                this.columnPARAMTYPEID = new System.Data.DataColumn("PARAMTYPEID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMTYPEID);
                this.columnOBJID = new System.Data.DataColumn("OBJID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJID);
                this.columnSCA_PARAMID = new System.Data.DataColumn("SCA_PARAMID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCA_PARAMID);
                this.columnERRORS = new System.Data.DataColumn("ERRORS", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnERRORS);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPARAMID}, true));
                this.columnPARAMID.AllowDBNull = false;
                this.columnPARAMID.Unique = true;
                this.columnPARAMTYPEID.AllowDBNull = false;
                this.columnOBJID.AllowDBNull = false;
                this.columnERRORS.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow NewPARAMETERSRow() {
                return ((PARAMETERSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PARAMETERSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PARAMETERSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PARAMETERSRowChanged != null)) {
                    this.PARAMETERSRowChanged(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PARAMETERSRowChanging != null)) {
                    this.PARAMETERSRowChanging(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PARAMETERSRowDeleted != null)) {
                    this.PARAMETERSRowDeleted(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PARAMETERSRowDeleting != null)) {
                    this.PARAMETERSRowDeleting(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePARAMETERSRow(PARAMETERSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PARAMETERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PARAMTYPESDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPARAMTYPEID;
            
            private System.Data.DataColumn columnUNITID;
            
            private System.Data.DataColumn columnPARAMNAME;
            
            private System.Data.DataColumn columnSCALAR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESDataTable() {
                this.TableName = "PARAMTYPES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARAMTYPESDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PARAMTYPESDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PARAMTYPEIDColumn {
                get {
                    return this.columnPARAMTYPEID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UNITIDColumn {
                get {
                    return this.columnUNITID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PARAMNAMEColumn {
                get {
                    return this.columnPARAMNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SCALARColumn {
                get {
                    return this.columnSCALAR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRow this[int index] {
                get {
                    return ((PARAMTYPESRow)(this.Rows[index]));
                }
            }
            
            public event PARAMTYPESRowChangeEventHandler PARAMTYPESRowChanging;
            
            public event PARAMTYPESRowChangeEventHandler PARAMTYPESRowChanged;
            
            public event PARAMTYPESRowChangeEventHandler PARAMTYPESRowDeleting;
            
            public event PARAMTYPESRowChangeEventHandler PARAMTYPESRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPARAMTYPESRow(PARAMTYPESRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRow AddPARAMTYPESRow(decimal PARAMTYPEID, UNITSRow _parentUNITSRowByFK_PARAMTYP_UNITS___P_UNITS, string PARAMNAME, decimal SCALAR) {
                PARAMTYPESRow rowPARAMTYPESRow = ((PARAMTYPESRow)(this.NewRow()));
                rowPARAMTYPESRow.ItemArray = new object[] {
                        PARAMTYPEID,
                        _parentUNITSRowByFK_PARAMTYP_UNITS___P_UNITS[0],
                        PARAMNAME,
                        SCALAR};
                this.Rows.Add(rowPARAMTYPESRow);
                return rowPARAMTYPESRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRow FindByPARAMTYPEID(decimal PARAMTYPEID) {
                return ((PARAMTYPESRow)(this.Rows.Find(new object[] {
                            PARAMTYPEID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PARAMTYPESDataTable cln = ((PARAMTYPESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PARAMTYPESDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPARAMTYPEID = base.Columns["PARAMTYPEID"];
                this.columnUNITID = base.Columns["UNITID"];
                this.columnPARAMNAME = base.Columns["PARAMNAME"];
                this.columnSCALAR = base.Columns["SCALAR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPARAMTYPEID = new System.Data.DataColumn("PARAMTYPEID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMTYPEID);
                this.columnUNITID = new System.Data.DataColumn("UNITID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNITID);
                this.columnPARAMNAME = new System.Data.DataColumn("PARAMNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMNAME);
                this.columnSCALAR = new System.Data.DataColumn("SCALAR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCALAR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPARAMTYPEID}, true));
                this.columnPARAMTYPEID.AllowDBNull = false;
                this.columnPARAMTYPEID.Unique = true;
                this.columnUNITID.AllowDBNull = false;
                this.columnPARAMNAME.MaxLength = 20;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRow NewPARAMTYPESRow() {
                return ((PARAMTYPESRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PARAMTYPESRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PARAMTYPESRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PARAMTYPESRowChanged != null)) {
                    this.PARAMTYPESRowChanged(this, new PARAMTYPESRowChangeEvent(((PARAMTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PARAMTYPESRowChanging != null)) {
                    this.PARAMTYPESRowChanging(this, new PARAMTYPESRowChangeEvent(((PARAMTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PARAMTYPESRowDeleted != null)) {
                    this.PARAMTYPESRowDeleted(this, new PARAMTYPESRowChangeEvent(((PARAMTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PARAMTYPESRowDeleting != null)) {
                    this.PARAMTYPESRowDeleting(this, new PARAMTYPESRowChangeEvent(((PARAMTYPESRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePARAMTYPESRow(PARAMTYPESRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PARAMTYPESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SCALARSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPARAMID;
            
            private System.Data.DataColumn columnSCALVALUE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSDataTable() {
                this.TableName = "SCALARS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCALARSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SCALARSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PARAMIDColumn {
                get {
                    return this.columnPARAMID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SCALVALUEColumn {
                get {
                    return this.columnSCALVALUE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRow this[int index] {
                get {
                    return ((SCALARSRow)(this.Rows[index]));
                }
            }
            
            public event SCALARSRowChangeEventHandler SCALARSRowChanging;
            
            public event SCALARSRowChangeEventHandler SCALARSRowChanged;
            
            public event SCALARSRowChangeEventHandler SCALARSRowDeleting;
            
            public event SCALARSRowChangeEventHandler SCALARSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSCALARSRow(SCALARSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRow AddSCALARSRow(PARAMETERSRow parentPARAMETERSRowByFK_SCALARS_PARAMETER_PARAMETE, decimal SCALVALUE) {
                SCALARSRow rowSCALARSRow = ((SCALARSRow)(this.NewRow()));
                rowSCALARSRow.ItemArray = new object[] {
                        parentPARAMETERSRowByFK_SCALARS_PARAMETER_PARAMETE[0],
                        SCALVALUE};
                this.Rows.Add(rowSCALARSRow);
                return rowSCALARSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRow FindByPARAMID(decimal PARAMID) {
                return ((SCALARSRow)(this.Rows.Find(new object[] {
                            PARAMID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SCALARSDataTable cln = ((SCALARSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SCALARSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPARAMID = base.Columns["PARAMID"];
                this.columnSCALVALUE = base.Columns["SCALVALUE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPARAMID = new System.Data.DataColumn("PARAMID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMID);
                this.columnSCALVALUE = new System.Data.DataColumn("SCALVALUE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCALVALUE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPARAMID}, true));
                this.columnPARAMID.AllowDBNull = false;
                this.columnPARAMID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRow NewSCALARSRow() {
                return ((SCALARSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SCALARSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SCALARSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SCALARSRowChanged != null)) {
                    this.SCALARSRowChanged(this, new SCALARSRowChangeEvent(((SCALARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SCALARSRowChanging != null)) {
                    this.SCALARSRowChanging(this, new SCALARSRowChangeEvent(((SCALARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SCALARSRowDeleted != null)) {
                    this.SCALARSRowDeleted(this, new SCALARSRowChangeEvent(((SCALARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SCALARSRowDeleting != null)) {
                    this.SCALARSRowDeleting(this, new SCALARSRowChangeEvent(((SCALARSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSCALARSRow(SCALARSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SCALARSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UNITSDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUNITID;
            
            private System.Data.DataColumn columnUNITNAME;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSDataTable() {
                this.TableName = "UNITS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UNITSDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UNITSDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UNITIDColumn {
                get {
                    return this.columnUNITID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UNITNAMEColumn {
                get {
                    return this.columnUNITNAME;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSRow this[int index] {
                get {
                    return ((UNITSRow)(this.Rows[index]));
                }
            }
            
            public event UNITSRowChangeEventHandler UNITSRowChanging;
            
            public event UNITSRowChangeEventHandler UNITSRowChanged;
            
            public event UNITSRowChangeEventHandler UNITSRowDeleting;
            
            public event UNITSRowChangeEventHandler UNITSRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUNITSRow(UNITSRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSRow AddUNITSRow(decimal UNITID, string UNITNAME) {
                UNITSRow rowUNITSRow = ((UNITSRow)(this.NewRow()));
                rowUNITSRow.ItemArray = new object[] {
                        UNITID,
                        UNITNAME};
                this.Rows.Add(rowUNITSRow);
                return rowUNITSRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSRow FindByUNITID(decimal UNITID) {
                return ((UNITSRow)(this.Rows.Find(new object[] {
                            UNITID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UNITSDataTable cln = ((UNITSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UNITSDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUNITID = base.Columns["UNITID"];
                this.columnUNITNAME = base.Columns["UNITNAME"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUNITID = new System.Data.DataColumn("UNITID", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNITID);
                this.columnUNITNAME = new System.Data.DataColumn("UNITNAME", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNITNAME);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUNITID}, true));
                this.columnUNITID.AllowDBNull = false;
                this.columnUNITID.Unique = true;
                this.columnUNITNAME.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSRow NewUNITSRow() {
                return ((UNITSRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UNITSRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UNITSRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UNITSRowChanged != null)) {
                    this.UNITSRowChanged(this, new UNITSRowChangeEvent(((UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UNITSRowChanging != null)) {
                    this.UNITSRowChanging(this, new UNITSRowChangeEvent(((UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UNITSRowDeleted != null)) {
                    this.UNITSRowDeleted(this, new UNITSRowChangeEvent(((UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UNITSRowDeleting != null)) {
                    this.UNITSRowDeleting(this, new UNITSRowChangeEvent(((UNITSRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUNITSRow(UNITSRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UNITSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OBJECTSRow : System.Data.DataRow {
            
            private OBJECTSDataTable tableOBJECTS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBJECTSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOBJECTS = ((OBJECTSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OBJID {
                get {
                    return ((decimal)(this[this.tableOBJECTS.OBJIDColumn]));
                }
                set {
                    this[this.tableOBJECTS.OBJIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OBJTYPEID {
                get {
                    return ((decimal)(this[this.tableOBJECTS.OBJTYPEIDColumn]));
                }
                set {
                    this[this.tableOBJECTS.OBJTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOBJECTS.DATEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DATE\' in table \'OBJECTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOBJECTS.DATEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESRow OBJTYPESRow {
                get {
                    return ((OBJTYPESRow)(this.GetParentRow(this.Table.ParentRelations["FK_OBJECTS_OBJTYPES__OBJTYPES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_OBJECTS_OBJTYPES__OBJTYPES"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tableOBJECTS.DATEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tableOBJECTS.DATEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow[] GetPARAMETERSRows() {
                return ((PARAMETERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PARAMETE_OBJECTS -_OBJECTS"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HISTVALUESRow : System.Data.DataRow {
            
            private HISTVALUESDataTable tableHISTVALUES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HISTVALUESRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHISTVALUES = ((HISTVALUESDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PARAMID {
                get {
                    return ((decimal)(this[this.tableHISTVALUES.PARAMIDColumn]));
                }
                set {
                    this[this.tableHISTVALUES.PARAMIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LEFTBOUND {
                get {
                    return ((decimal)(this[this.tableHISTVALUES.LEFTBOUNDColumn]));
                }
                set {
                    this[this.tableHISTVALUES.LEFTBOUNDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal RIGHTBOUND {
                get {
                    try {
                        return ((decimal)(this[this.tableHISTVALUES.RIGHTBOUNDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'RIGHTBOUND\' in table \'HISTVALUES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHISTVALUES.RIGHTBOUNDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal VALUE {
                get {
                    try {
                        return ((decimal)(this[this.tableHISTVALUES.VALUEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'VALUE\' in table \'HISTVALUES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHISTVALUES.VALUEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow PARAMETERSRow {
                get {
                    return ((PARAMETERSRow)(this.GetParentRow(this.Table.ParentRelations["FK_HISTVALU_PARAMETER_PARAMETE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_HISTVALU_PARAMETER_PARAMETE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRIGHTBOUNDNull() {
                return this.IsNull(this.tableHISTVALUES.RIGHTBOUNDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRIGHTBOUNDNull() {
                this[this.tableHISTVALUES.RIGHTBOUNDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVALUENull() {
                return this.IsNull(this.tableHISTVALUES.VALUEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVALUENull() {
                this[this.tableHISTVALUES.VALUEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OBJTYPESRow : System.Data.DataRow {
            
            private OBJTYPESDataTable tableOBJTYPES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OBJTYPESRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOBJTYPES = ((OBJTYPESDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OBJTYPEID {
                get {
                    return ((decimal)(this[this.tableOBJTYPES.OBJTYPEIDColumn]));
                }
                set {
                    this[this.tableOBJTYPES.OBJTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBJTYPENAME {
                get {
                    try {
                        return ((string)(this[this.tableOBJTYPES.OBJTYPENAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OBJTYPENAME\' in table \'OBJTYPES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOBJTYPES.OBJTYPENAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBJTYPEDESC {
                get {
                    try {
                        return ((string)(this[this.tableOBJTYPES.OBJTYPEDESCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'OBJTYPEDESC\' in table \'OBJTYPES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOBJTYPES.OBJTYPEDESCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBJTYPENAMENull() {
                return this.IsNull(this.tableOBJTYPES.OBJTYPENAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBJTYPENAMENull() {
                this[this.tableOBJTYPES.OBJTYPENAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBJTYPEDESCNull() {
                return this.IsNull(this.tableOBJTYPES.OBJTYPEDESCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBJTYPEDESCNull() {
                this[this.tableOBJTYPES.OBJTYPEDESCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRow[] GetOBJECTSRows() {
                return ((OBJECTSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_OBJECTS_OBJTYPES__OBJTYPES"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PARAMETERSRow : System.Data.DataRow {
            
            private PARAMETERSDataTable tablePARAMETERS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARAMETERSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePARAMETERS = ((PARAMETERSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PARAMID {
                get {
                    return ((decimal)(this[this.tablePARAMETERS.PARAMIDColumn]));
                }
                set {
                    this[this.tablePARAMETERS.PARAMIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PARAMTYPEID {
                get {
                    return ((decimal)(this[this.tablePARAMETERS.PARAMTYPEIDColumn]));
                }
                set {
                    this[this.tablePARAMETERS.PARAMTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OBJID {
                get {
                    return ((decimal)(this[this.tablePARAMETERS.OBJIDColumn]));
                }
                set {
                    this[this.tablePARAMETERS.OBJIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SCA_PARAMID {
                get {
                    try {
                        return ((decimal)(this[this.tablePARAMETERS.SCA_PARAMIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SCA_PARAMID\' in table \'PARAMETERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARAMETERS.SCA_PARAMIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ERRORS {
                get {
                    return ((decimal)(this[this.tablePARAMETERS.ERRORSColumn]));
                }
                set {
                    this[this.tablePARAMETERS.ERRORSColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRow OBJECTSRow {
                get {
                    return ((OBJECTSRow)(this.GetParentRow(this.Table.ParentRelations["FK_PARAMETE_OBJECTS -_OBJECTS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PARAMETE_OBJECTS -_OBJECTS"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRow SCALARSRow {
                get {
                    return ((SCALARSRow)(this.GetParentRow(this.Table.ParentRelations["FK_PARAMETE_PARAMETER_SCALARS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PARAMETE_PARAMETER_SCALARS"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRow PARAMTYPESRow {
                get {
                    return ((PARAMTYPESRow)(this.GetParentRow(this.Table.ParentRelations["FK_PARAMETE_PARAMTYPE_PARAMTYP"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PARAMETE_PARAMTYPE_PARAMTYP"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCA_PARAMIDNull() {
                return this.IsNull(this.tablePARAMETERS.SCA_PARAMIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCA_PARAMIDNull() {
                this[this.tablePARAMETERS.SCA_PARAMIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESRow[] GetHISTVALUESRows() {
                return ((HISTVALUESRow[])(base.GetChildRows(this.Table.ChildRelations["FK_HISTVALU_PARAMETER_PARAMETE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRow[] GetSCALARSRows() {
                return ((SCALARSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SCALARS_PARAMETER_PARAMETE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PARAMTYPESRow : System.Data.DataRow {
            
            private PARAMTYPESDataTable tablePARAMTYPES;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARAMTYPESRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePARAMTYPES = ((PARAMTYPESDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PARAMTYPEID {
                get {
                    return ((decimal)(this[this.tablePARAMTYPES.PARAMTYPEIDColumn]));
                }
                set {
                    this[this.tablePARAMTYPES.PARAMTYPEIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UNITID {
                get {
                    return ((decimal)(this[this.tablePARAMTYPES.UNITIDColumn]));
                }
                set {
                    this[this.tablePARAMTYPES.UNITIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PARAMNAME {
                get {
                    try {
                        return ((string)(this[this.tablePARAMTYPES.PARAMNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PARAMNAME\' in table \'PARAMTYPES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARAMTYPES.PARAMNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SCALAR {
                get {
                    try {
                        return ((decimal)(this[this.tablePARAMTYPES.SCALARColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SCALAR\' in table \'PARAMTYPES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARAMTYPES.SCALARColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSRow UNITSRow {
                get {
                    return ((UNITSRow)(this.GetParentRow(this.Table.ParentRelations["FK_PARAMTYP_UNITS - P_UNITS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_PARAMTYP_UNITS - P_UNITS"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARAMNAMENull() {
                return this.IsNull(this.tablePARAMTYPES.PARAMNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARAMNAMENull() {
                this[this.tablePARAMTYPES.PARAMNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCALARNull() {
                return this.IsNull(this.tablePARAMTYPES.SCALARColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCALARNull() {
                this[this.tablePARAMTYPES.SCALARColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow[] GetPARAMETERSRows() {
                return ((PARAMETERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PARAMETE_PARAMTYPE_PARAMTYP"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SCALARSRow : System.Data.DataRow {
            
            private SCALARSDataTable tableSCALARS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCALARSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSCALARS = ((SCALARSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PARAMID {
                get {
                    return ((decimal)(this[this.tableSCALARS.PARAMIDColumn]));
                }
                set {
                    this[this.tableSCALARS.PARAMIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SCALVALUE {
                get {
                    try {
                        return ((decimal)(this[this.tableSCALARS.SCALVALUEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SCALVALUE\' in table \'SCALARS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCALARS.SCALVALUEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow PARAMETERSRow {
                get {
                    return ((PARAMETERSRow)(this.GetParentRow(this.Table.ParentRelations["FK_SCALARS_PARAMETER_PARAMETE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SCALARS_PARAMETER_PARAMETE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCALVALUENull() {
                return this.IsNull(this.tableSCALARS.SCALVALUEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCALVALUENull() {
                this[this.tableSCALARS.SCALVALUEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow[] GetPARAMETERSRows() {
                return ((PARAMETERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PARAMETE_PARAMETER_SCALARS"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UNITSRow : System.Data.DataRow {
            
            private UNITSDataTable tableUNITS;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UNITSRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUNITS = ((UNITSDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UNITID {
                get {
                    return ((decimal)(this[this.tableUNITS.UNITIDColumn]));
                }
                set {
                    this[this.tableUNITS.UNITIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNITNAME {
                get {
                    try {
                        return ((string)(this[this.tableUNITS.UNITNAMEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UNITNAME\' in table \'UNITS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUNITS.UNITNAMEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNAMENull() {
                return this.IsNull(this.tableUNITS.UNITNAMEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNAMENull() {
                this[this.tableUNITS.UNITNAMEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRow[] GetPARAMTYPESRows() {
                return ((PARAMTYPESRow[])(base.GetChildRows(this.Table.ChildRelations["FK_PARAMTYP_UNITS - P_UNITS"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OBJECTSRowChangeEvent : System.EventArgs {
            
            private OBJECTSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRowChangeEvent(OBJECTSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJECTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HISTVALUESRowChangeEvent : System.EventArgs {
            
            private HISTVALUESRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESRowChangeEvent(HISTVALUESRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HISTVALUESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OBJTYPESRowChangeEvent : System.EventArgs {
            
            private OBJTYPESRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESRowChangeEvent(OBJTYPESRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OBJTYPESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PARAMETERSRowChangeEvent : System.EventArgs {
            
            private PARAMETERSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRowChangeEvent(PARAMETERSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PARAMTYPESRowChangeEvent : System.EventArgs {
            
            private PARAMTYPESRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRowChangeEvent(PARAMTYPESRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMTYPESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SCALARSRowChangeEvent : System.EventArgs {
            
            private SCALARSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRowChangeEvent(SCALARSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCALARSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UNITSRowChangeEvent : System.EventArgs {
            
            private UNITSRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSRowChangeEvent(UNITSRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UNITSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DB___labs.DataSet1TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OBJECTSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OBJECTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OBJECTS";
            tableMapping.ColumnMappings.Add("OBJID", "OBJID");
            tableMapping.ColumnMappings.Add("OBJTYPEID", "OBJTYPEID");
            tableMapping.ColumnMappings.Add("DATE", "DATE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SYSTEM\".\"OBJECTS\" WHERE ((\"OBJID\" = :Original_OBJID) AND (\"OBJTYPEID" +
                "\" = :Original_OBJTYPEID) AND ((:IsNull_DATE = 1 AND \"DATE\" IS NULL) OR (\"DATE\" =" +
                " :Original_DATE)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DATE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "DATE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"OBJECTS\" (\"OBJID\", \"OBJTYPEID\", \"DATE\") VALUES (:OBJID, :OB" +
                "JTYPEID, :DATE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "DATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"SYSTEM\".\"OBJECTS\" SET \"OBJID\" = :OBJID, \"OBJTYPEID\" = :OBJTYPEID, \"DATE\" " +
                "= :DATE WHERE ((\"OBJID\" = :Original_OBJID) AND (\"OBJTYPEID\" = :Original_OBJTYPEI" +
                "D) AND ((:IsNull_DATE = 1 AND \"DATE\" IS NULL) OR (\"DATE\" = :Original_DATE)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("DATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "DATE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_DATE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "DATE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_DATE", System.Data.OracleClient.OracleType.DateTime, 0, System.Data.ParameterDirection.Input, "DATE", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DB___labs.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OBJID, OBJTYPEID, \"DATE\" FROM \"SYSTEM\".OBJECTS";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.OBJECTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.OBJECTSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.OBJECTSDataTable dataTable = new DataSet1.OBJECTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.OBJECTSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "OBJECTS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_OBJID, decimal Original_OBJTYPEID, System.Nullable<System.DateTime> Original_DATE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_OBJID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_OBJTYPEID));
            if ((Original_DATE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_DATE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal OBJID, decimal OBJTYPEID, System.Nullable<System.DateTime> DATE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(OBJID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(OBJTYPEID));
            if ((DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal OBJID, decimal OBJTYPEID, System.Nullable<System.DateTime> DATE, decimal Original_OBJID, decimal Original_OBJTYPEID, System.Nullable<System.DateTime> Original_DATE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(OBJID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(OBJTYPEID));
            if ((DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Original_OBJID));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_OBJTYPEID));
            if ((Original_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HISTVALUESTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HISTVALUESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HISTVALUES";
            tableMapping.ColumnMappings.Add("PARAMID", "PARAMID");
            tableMapping.ColumnMappings.Add("LEFTBOUND", "LEFTBOUND");
            tableMapping.ColumnMappings.Add("RIGHTBOUND", "RIGHTBOUND");
            tableMapping.ColumnMappings.Add("VALUE", "VALUE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""SYSTEM"".""HISTVALUES"" WHERE ((""PARAMID"" = :Original_PARAMID) AND (""LEFTBOUND"" = :Original_LEFTBOUND) AND ((:IsNull_RIGHTBOUND = 1 AND ""RIGHTBOUND"" IS NULL) OR (""RIGHTBOUND"" = :Original_RIGHTBOUND)) AND ((:IsNull_VALUE = 1 AND ""VALUE"" IS NULL) OR (""VALUE"" = :Original_VALUE)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LEFTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LEFTBOUND", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RIGHTBOUND", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RIGHTBOUND", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RIGHTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RIGHTBOUND", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_VALUE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "VALUE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_VALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "VALUE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"HISTVALUES\" (\"PARAMID\", \"LEFTBOUND\", \"RIGHTBOUND\", \"VALUE\")" +
                " VALUES (:PARAMID, :LEFTBOUND, :RIGHTBOUND, :VALUE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LEFTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LEFTBOUND", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RIGHTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RIGHTBOUND", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("VALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "VALUE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SYSTEM"".""HISTVALUES"" SET ""PARAMID"" = :PARAMID, ""LEFTBOUND"" = :LEFTBOUND, ""RIGHTBOUND"" = :RIGHTBOUND, ""VALUE"" = :VALUE WHERE ((""PARAMID"" = :Original_PARAMID) AND (""LEFTBOUND"" = :Original_LEFTBOUND) AND ((:IsNull_RIGHTBOUND = 1 AND ""RIGHTBOUND"" IS NULL) OR (""RIGHTBOUND"" = :Original_RIGHTBOUND)) AND ((:IsNull_VALUE = 1 AND ""VALUE"" IS NULL) OR (""VALUE"" = :Original_VALUE)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("LEFTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LEFTBOUND", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("RIGHTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RIGHTBOUND", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("VALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "VALUE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_LEFTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "LEFTBOUND", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_RIGHTBOUND", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "RIGHTBOUND", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_RIGHTBOUND", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "RIGHTBOUND", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_VALUE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "VALUE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_VALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "VALUE", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DB___labs.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[2];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PARAMID, LEFTBOUND, RIGHTBOUND, \"VALUE\" FROM \"SYSTEM\".HISTVALUES";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     HISTVALUES.PARAMID, HISTVALUES.LEFTBOUND, HISTVALUES.RIGHTBOUND, HISTVALUES.""VALUE""
FROM         PARAMTYPES, PARAMETERS, HISTVALUES
WHERE     PARAMTYPES.PARAMTYPEID = PARAMETERS.PARAMTYPEID AND PARAMETERS.PARAMID = HISTVALUES.PARAMID AND 
                      (PARAMTYPES.PARAMNAME = :ParamName) AND (PARAMETERS.OBJID = :ObjId)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.OracleClient.OracleParameter("ParamName", System.Data.OracleClient.OracleType.Char, 20, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OracleClient.OracleParameter("ObjId", System.Data.OracleClient.OracleType.Number, 22, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.HISTVALUESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.HISTVALUESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.HISTVALUESDataTable dataTable = new DataSet1.HISTVALUESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByObjIdAndParamName(DataSet1.HISTVALUESDataTable dataTable, string ParamName, decimal ObjId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ParamName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ParamName));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((decimal)(ObjId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.HISTVALUESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "HISTVALUES");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_PARAMID, decimal Original_LEFTBOUND, System.Nullable<decimal> Original_RIGHTBOUND, System.Nullable<decimal> Original_VALUE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_PARAMID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_LEFTBOUND));
            if ((Original_RIGHTBOUND.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_RIGHTBOUND.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((Original_VALUE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_VALUE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal PARAMID, decimal LEFTBOUND, System.Nullable<decimal> RIGHTBOUND, System.Nullable<decimal> VALUE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(PARAMID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(LEFTBOUND));
            if ((RIGHTBOUND.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(RIGHTBOUND.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((VALUE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(VALUE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal PARAMID, decimal LEFTBOUND, System.Nullable<decimal> RIGHTBOUND, System.Nullable<decimal> VALUE, decimal Original_PARAMID, decimal Original_LEFTBOUND, System.Nullable<decimal> Original_RIGHTBOUND, System.Nullable<decimal> Original_VALUE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(PARAMID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(LEFTBOUND));
            if ((RIGHTBOUND.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(RIGHTBOUND.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((VALUE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(VALUE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_PARAMID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_LEFTBOUND));
            if ((Original_RIGHTBOUND.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_RIGHTBOUND.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Original_VALUE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_VALUE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class OBJTYPESTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public OBJTYPESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "OBJTYPES";
            tableMapping.ColumnMappings.Add("OBJTYPEID", "OBJTYPEID");
            tableMapping.ColumnMappings.Add("OBJTYPENAME", "OBJTYPENAME");
            tableMapping.ColumnMappings.Add("OBJTYPEDESC", "OBJTYPEDESC");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""SYSTEM"".""OBJTYPES"" WHERE ((""OBJTYPEID"" = :Original_OBJTYPEID) AND ((:IsNull_OBJTYPENAME = 1 AND ""OBJTYPENAME"" IS NULL) OR (""OBJTYPENAME"" = :Original_OBJTYPENAME)) AND ((:IsNull_OBJTYPEDESC = 1 AND ""OBJTYPEDESC"" IS NULL) OR (""OBJTYPEDESC"" = :Original_OBJTYPEDESC)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_OBJTYPENAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OBJTYPENAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPENAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPENAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_OBJTYPEDESC", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OBJTYPEDESC", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPEDESC", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPEDESC", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"OBJTYPES\" (\"OBJTYPEID\", \"OBJTYPENAME\", \"OBJTYPEDESC\") VALUE" +
                "S (:OBJTYPEID, :OBJTYPENAME, :OBJTYPEDESC)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPENAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPENAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPEDESC", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPEDESC", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SYSTEM"".""OBJTYPES"" SET ""OBJTYPEID"" = :OBJTYPEID, ""OBJTYPENAME"" = :OBJTYPENAME, ""OBJTYPEDESC"" = :OBJTYPEDESC WHERE ((""OBJTYPEID"" = :Original_OBJTYPEID) AND ((:IsNull_OBJTYPENAME = 1 AND ""OBJTYPENAME"" IS NULL) OR (""OBJTYPENAME"" = :Original_OBJTYPENAME)) AND ((:IsNull_OBJTYPEDESC = 1 AND ""OBJTYPEDESC"" IS NULL) OR (""OBJTYPEDESC"" = :Original_OBJTYPEDESC)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPENAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPENAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJTYPEDESC", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPEDESC", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_OBJTYPENAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OBJTYPENAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPENAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPENAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_OBJTYPEDESC", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "OBJTYPEDESC", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJTYPEDESC", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "OBJTYPEDESC", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DB___labs.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OBJTYPEID, OBJTYPENAME, OBJTYPEDESC FROM \"SYSTEM\".OBJTYPES";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.OBJTYPESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.OBJTYPESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.OBJTYPESDataTable dataTable = new DataSet1.OBJTYPESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.OBJTYPESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "OBJTYPES");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_OBJTYPEID, string Original_OBJTYPENAME, string Original_OBJTYPEDESC) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_OBJTYPEID));
            if ((Original_OBJTYPENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_OBJTYPENAME));
            }
            if ((Original_OBJTYPEDESC == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_OBJTYPEDESC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal OBJTYPEID, string OBJTYPENAME, string OBJTYPEDESC) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(OBJTYPEID));
            if ((OBJTYPENAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(OBJTYPENAME));
            }
            if ((OBJTYPEDESC == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(OBJTYPEDESC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal OBJTYPEID, string OBJTYPENAME, string OBJTYPEDESC, decimal Original_OBJTYPEID, string Original_OBJTYPENAME, string Original_OBJTYPEDESC) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(OBJTYPEID));
            if ((OBJTYPENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(OBJTYPENAME));
            }
            if ((OBJTYPEDESC == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(OBJTYPEDESC));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Original_OBJTYPEID));
            if ((Original_OBJTYPENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_OBJTYPENAME));
            }
            if ((Original_OBJTYPEDESC == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_OBJTYPEDESC));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PARAMETERSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PARAMETERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PARAMETERS";
            tableMapping.ColumnMappings.Add("PARAMID", "PARAMID");
            tableMapping.ColumnMappings.Add("PARAMTYPEID", "PARAMTYPEID");
            tableMapping.ColumnMappings.Add("OBJID", "OBJID");
            tableMapping.ColumnMappings.Add("SCA_PARAMID", "SCA_PARAMID");
            tableMapping.ColumnMappings.Add("ERRORS", "ERRORS");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""SYSTEM"".""PARAMETERS"" WHERE ((""PARAMID"" = :Original_PARAMID) AND (""PARAMTYPEID"" = :Original_PARAMTYPEID) AND (""OBJID"" = :Original_OBJID) AND ((:IsNull_SCA_PARAMID = 1 AND ""SCA_PARAMID"" IS NULL) OR (""SCA_PARAMID"" = :Original_SCA_PARAMID)) AND (""ERRORS"" = :Original_ERRORS))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCA_PARAMID", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCA_PARAMID", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCA_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCA_PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_ERRORS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "ERRORS", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"PARAMETERS\" (\"PARAMID\", \"PARAMTYPEID\", \"OBJID\", \"SCA_PARAMI" +
                "D\", \"ERRORS\") VALUES (:PARAMID, :PARAMTYPEID, :OBJID, :SCA_PARAMID, :ERRORS)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCA_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCA_PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("ERRORS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "ERRORS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SYSTEM"".""PARAMETERS"" SET ""PARAMID"" = :PARAMID, ""PARAMTYPEID"" = :PARAMTYPEID, ""OBJID"" = :OBJID, ""SCA_PARAMID"" = :SCA_PARAMID, ""ERRORS"" = :ERRORS WHERE ((""PARAMID"" = :Original_PARAMID) AND (""PARAMTYPEID"" = :Original_PARAMTYPEID) AND (""OBJID"" = :Original_OBJID) AND ((:IsNull_SCA_PARAMID = 1 AND ""SCA_PARAMID"" IS NULL) OR (""SCA_PARAMID"" = :Original_SCA_PARAMID)) AND (""ERRORS"" = :Original_ERRORS))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCA_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCA_PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("ERRORS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "ERRORS", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_OBJID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCA_PARAMID", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCA_PARAMID", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCA_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCA_PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_ERRORS", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "ERRORS", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DB___labs.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[2];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PARAMID, PARAMTYPEID, OBJID, SCA_PARAMID, ERRORS FROM \"SYSTEM\".PARAMETERS";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     PARAMETERS.PARAMID, PARAMETERS.PARAMTYPEID, PARAMETERS.OBJID, PARAMETERS.SCA_PARAMID, PARAMETERS.ERRORS
FROM         OBJTYPES, OBJECTS, PARAMETERS
WHERE     OBJTYPES.OBJTYPEID = OBJECTS.OBJTYPEID AND OBJECTS.OBJID = PARAMETERS.OBJID AND (OBJTYPES.OBJTYPENAME = :ObjTypeName)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.OracleClient.OracleParameter("ObjTypeName", System.Data.OracleClient.OracleType.Char, 100, System.Data.ParameterDirection.Input, "OBJTYPENAME", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.PARAMETERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.PARAMETERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.PARAMETERSDataTable dataTable = new DataSet1.PARAMETERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByObjTypeName(DataSet1.PARAMETERSDataTable dataTable, string ObjTypeName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ObjTypeName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ObjTypeName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.PARAMETERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "PARAMETERS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_PARAMID, decimal Original_PARAMTYPEID, decimal Original_OBJID, System.Nullable<decimal> Original_SCA_PARAMID, decimal Original_ERRORS) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_PARAMID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_PARAMTYPEID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_OBJID));
            if ((Original_SCA_PARAMID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_SCA_PARAMID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_ERRORS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal PARAMID, decimal PARAMTYPEID, decimal OBJID, System.Nullable<decimal> SCA_PARAMID, decimal ERRORS) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(PARAMID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(PARAMTYPEID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(OBJID));
            if ((SCA_PARAMID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(SCA_PARAMID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(ERRORS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal PARAMID, decimal PARAMTYPEID, decimal OBJID, System.Nullable<decimal> SCA_PARAMID, decimal ERRORS, decimal Original_PARAMID, decimal Original_PARAMTYPEID, decimal Original_OBJID, System.Nullable<decimal> Original_SCA_PARAMID, decimal Original_ERRORS) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(PARAMID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(PARAMTYPEID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(OBJID));
            if ((SCA_PARAMID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(SCA_PARAMID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(ERRORS));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_PARAMID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_PARAMTYPEID));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_OBJID));
            if ((Original_SCA_PARAMID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_SCA_PARAMID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_ERRORS));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PARAMTYPESTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PARAMTYPESTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PARAMTYPES";
            tableMapping.ColumnMappings.Add("PARAMTYPEID", "PARAMTYPEID");
            tableMapping.ColumnMappings.Add("UNITID", "UNITID");
            tableMapping.ColumnMappings.Add("PARAMNAME", "PARAMNAME");
            tableMapping.ColumnMappings.Add("SCALAR", "SCALAR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM ""SYSTEM"".""PARAMTYPES"" WHERE ((""PARAMTYPEID"" = :Original_PARAMTYPEID) AND (""UNITID"" = :Original_UNITID) AND ((:IsNull_PARAMNAME = 1 AND ""PARAMNAME"" IS NULL) OR (""PARAMNAME"" = :Original_PARAMNAME)) AND ((:IsNull_SCALAR = 1 AND ""SCALAR"" IS NULL) OR (""SCALAR"" = :Original_SCALAR)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_PARAMNAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCALAR", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCALAR", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCALAR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALAR", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"PARAMTYPES\" (\"PARAMTYPEID\", \"UNITID\", \"PARAMNAME\", \"SCALAR\"" +
                ") VALUES (:PARAMTYPEID, :UNITID, :PARAMNAME, :SCALAR)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCALAR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALAR", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE ""SYSTEM"".""PARAMTYPES"" SET ""PARAMTYPEID"" = :PARAMTYPEID, ""UNITID"" = :UNITID, ""PARAMNAME"" = :PARAMNAME, ""SCALAR"" = :SCALAR WHERE ((""PARAMTYPEID"" = :Original_PARAMTYPEID) AND (""UNITID"" = :Original_UNITID) AND ((:IsNull_PARAMNAME = 1 AND ""PARAMNAME"" IS NULL) OR (""PARAMNAME"" = :Original_PARAMNAME)) AND ((:IsNull_SCALAR = 1 AND ""SCALAR"" IS NULL) OR (""SCALAR"" = :Original_SCALAR)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCALAR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALAR", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMTYPEID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMTYPEID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_PARAMNAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCALAR", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCALAR", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCALAR", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALAR", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DB___labs.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PARAMTYPEID, UNITID, PARAMNAME, SCALAR FROM \"SYSTEM\".PARAMTYPES";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.PARAMTYPESDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.PARAMTYPESDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.PARAMTYPESDataTable dataTable = new DataSet1.PARAMTYPESDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.PARAMTYPESDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "PARAMTYPES");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_PARAMTYPEID, decimal Original_UNITID, string Original_PARAMNAME, System.Nullable<decimal> Original_SCALAR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_PARAMTYPEID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_UNITID));
            if ((Original_PARAMNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_PARAMNAME));
            }
            if ((Original_SCALAR.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_SCALAR.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal PARAMTYPEID, decimal UNITID, string PARAMNAME, System.Nullable<decimal> SCALAR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(PARAMTYPEID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(UNITID));
            if ((PARAMNAME == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PARAMNAME));
            }
            if ((SCALAR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(SCALAR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal PARAMTYPEID, decimal UNITID, string PARAMNAME, System.Nullable<decimal> SCALAR, decimal Original_PARAMTYPEID, decimal Original_UNITID, string Original_PARAMNAME, System.Nullable<decimal> Original_SCALAR) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(PARAMTYPEID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(UNITID));
            if ((PARAMNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PARAMNAME));
            }
            if ((SCALAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(SCALAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_PARAMTYPEID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_UNITID));
            if ((Original_PARAMNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_PARAMNAME));
            }
            if ((Original_SCALAR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_SCALAR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SCALARSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SCALARSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SCALARS";
            tableMapping.ColumnMappings.Add("PARAMID", "PARAMID");
            tableMapping.ColumnMappings.Add("SCALVALUE", "SCALVALUE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SYSTEM\".\"SCALARS\" WHERE ((\"PARAMID\" = :Original_PARAMID) AND ((:IsNu" +
                "ll_SCALVALUE = 1 AND \"SCALVALUE\" IS NULL) OR (\"SCALVALUE\" = :Original_SCALVALUE)" +
                "))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCALVALUE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCALVALUE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCALVALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALVALUE", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"SCALARS\" (\"PARAMID\", \"SCALVALUE\") VALUES (:PARAMID, :SCALVA" +
                "LUE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCALVALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALVALUE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"SYSTEM\".\"SCALARS\" SET \"PARAMID\" = :PARAMID, \"SCALVALUE\" = :SCALVALUE WHER" +
                "E ((\"PARAMID\" = :Original_PARAMID) AND ((:IsNull_SCALVALUE = 1 AND \"SCALVALUE\" I" +
                "S NULL) OR (\"SCALVALUE\" = :Original_SCALVALUE)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("SCALVALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALVALUE", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_PARAMID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "PARAMID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_SCALVALUE", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "SCALVALUE", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_SCALVALUE", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "SCALVALUE", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DB___labs.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[2];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PARAMID, SCALVALUE FROM \"SYSTEM\".SCALARS";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT     SCALARS.PARAMID, SCALARS.SCALVALUE
FROM         SCALARS, PARAMETERS, PARAMTYPES
WHERE     SCALARS.PARAMID = PARAMETERS.PARAMID AND PARAMETERS.PARAMTYPEID = PARAMTYPES.PARAMTYPEID AND (PARAMETERS.OBJID = :ObjId) 
                      AND (PARAMTYPES.PARAMNAME = :ParamName)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.OracleClient.OracleParameter("ObjId", System.Data.OracleClient.OracleType.Number, 22, System.Data.ParameterDirection.Input, "OBJID", System.Data.DataRowVersion.Current, false, null));
            this._commandCollection[1].Parameters.Add(new System.Data.OracleClient.OracleParameter("ParamName", System.Data.OracleClient.OracleType.Char, 20, System.Data.ParameterDirection.Input, "PARAMNAME", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.SCALARSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.SCALARSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.SCALARSDataTable dataTable = new DataSet1.SCALARSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByObjIdAndParamName(DataSet1.SCALARSDataTable dataTable, decimal ObjId, string ParamName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((decimal)(ObjId));
            if ((ParamName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(ParamName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.SCALARSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "SCALARS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_PARAMID, System.Nullable<decimal> Original_SCALVALUE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_PARAMID));
            if ((Original_SCALVALUE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_SCALVALUE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal PARAMID, System.Nullable<decimal> SCALVALUE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(PARAMID));
            if ((SCALVALUE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(SCALVALUE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal PARAMID, System.Nullable<decimal> SCALVALUE, decimal Original_PARAMID, System.Nullable<decimal> Original_SCALVALUE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(PARAMID));
            if ((SCALVALUE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(SCALVALUE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Original_PARAMID));
            if ((Original_SCALVALUE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(Original_SCALVALUE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UNITSTableAdapter : System.ComponentModel.Component {
        
        private System.Data.OracleClient.OracleDataAdapter _adapter;
        
        private System.Data.OracleClient.OracleConnection _connection;
        
        private System.Data.OracleClient.OracleCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UNITSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.OracleClient.OracleDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.OracleClient.OracleConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.OracleClient.OracleCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.OracleClient.OracleCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.OracleClient.OracleDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UNITS";
            tableMapping.ColumnMappings.Add("UNITID", "UNITID");
            tableMapping.ColumnMappings.Add("UNITNAME", "UNITNAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM \"SYSTEM\".\"UNITS\" WHERE ((\"UNITID\" = :Original_UNITID) AND ((:IsNull_U" +
                "NITNAME = 1 AND \"UNITNAME\" IS NULL) OR (\"UNITNAME\" = :Original_UNITNAME)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_UNITNAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "UNITNAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_UNITNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "UNITNAME", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO \"SYSTEM\".\"UNITS\" (\"UNITID\", \"UNITNAME\") VALUES (:UNITID, :UNITNAME)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("UNITNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "UNITNAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.OracleClient.OracleCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE \"SYSTEM\".\"UNITS\" SET \"UNITID\" = :UNITID, \"UNITNAME\" = :UNITNAME WHERE ((\"U" +
                "NITID\" = :Original_UNITID) AND ((:IsNull_UNITNAME = 1 AND \"UNITNAME\" IS NULL) OR" +
                " (\"UNITNAME\" = :Original_UNITNAME)))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("UNITNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "UNITNAME", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_UNITID", System.Data.OracleClient.OracleType.Number, 0, System.Data.ParameterDirection.Input, "UNITID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("IsNull_UNITNAME", System.Data.OracleClient.OracleType.Int32, 0, System.Data.ParameterDirection.Input, "UNITNAME", System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.OracleClient.OracleParameter("Original_UNITNAME", System.Data.OracleClient.OracleType.Char, 0, System.Data.ParameterDirection.Input, "UNITNAME", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.OracleClient.OracleConnection();
            this._connection.ConnectionString = global::DB___labs.Properties.Settings.Default.ConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.OracleClient.OracleCommand[1];
            this._commandCollection[0] = new System.Data.OracleClient.OracleCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UNITID, UNITNAME FROM \"SYSTEM\".UNITS";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.UNITSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DataSet1.UNITSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DataSet1.UNITSDataTable dataTable = new DataSet1.UNITSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.UNITSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "UNITS");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_UNITID, string Original_UNITNAME) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_UNITID));
            if ((Original_UNITNAME == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_UNITNAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal UNITID, string UNITNAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(UNITID));
            if ((UNITNAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UNITNAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal UNITID, string UNITNAME, decimal Original_UNITID, string Original_UNITNAME) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(UNITID));
            if ((UNITNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(UNITNAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Original_UNITID));
            if ((Original_UNITNAME == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_UNITNAME));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591